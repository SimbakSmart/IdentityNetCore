@model IdentityNetCore.Models.SignupViewModel

@{
    ViewData["Title"] = "Signup";
    var roles = new List<string>() { "Member", "Admin" };
}

<h1>Signup</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Signup">
            @Html.ValidationSummary()

            @*<div asp-validation-summary="ModelOnly" class="text-danger"></div>*@
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>

            <div class="form-group ">
                <label asp-for="Department" class="control-label">Department:</label>
                <input type-="text" asp-for="Department" class="form-control" />
            </div>

            <div class="form-group ">
                @*@Html.DropDownListFor(x => x.Role,
            roles.Select(s => new SelectListItem { Text = s, Value = s }), "Roles", null)*@

                @Html.DropDownListFor(x => x.Role,
                roles.Select(s => new SelectListItem { Text = s, Value = s }), "Roles",
                new { @class = "form-control" })
            </div>


            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
